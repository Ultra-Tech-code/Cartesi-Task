{"version":3,"sources":["components/WalletCard.jsx","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["WalletCard","useState","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","userBalance","setUserBalance","signResult","setSignResult","connButtonText","setConnButtonText","accountChangedHandler","newAccount","getAccountBalance","toString","account","window","ethereum","request","method","params","then","balance","ethers","utils","formatEther","catch","error","message","signMessageHandler","a","msg","Buffer","from","sign","console","on","location","reload","className","slice","onClick","isMetaMask","log","result","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA+FeA,IAzFI,WAClB,MAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4CF,mBAAS,MAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAsCJ,mBAAS,MAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAoCN,mBAAS,MAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAA4CR,mBAAS,kBAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KAwBMC,EAAwB,SAACC,GAC9BR,EAAkBQ,GAClBC,EAAkBD,EAAWE,aAGxBD,EAAoB,SAACE,GAC1BC,OAAOC,SAASC,QAAQ,CAACC,OAAQ,iBAAkBC,OAAQ,CAACL,EAAS,YACpEM,MAAK,SAAAC,GACLhB,EAAeiB,IAAOC,MAAMC,YAAYH,OAExCI,OAAM,SAAAC,GACNzB,EAAgByB,EAAMC,aASlBC,EAAkB,uCAAG,8BAAAC,EAAA,4DACH,mCADG,SAGlBC,EAHkB,YAGPC,EAAOC,KAFH,mCAEwB,QAAQnB,SAAS,QAHtC,SAILE,OAAOC,SAASC,QAAQ,CAC5CC,OAAQ,gBACRC,OAAQ,CAACW,EAAK5B,KANW,OAIlB+B,EAJkB,OAQxB1B,EAAc0B,GARU,gDAUxBC,QAAQR,MAAR,MACAnB,EAAc,UAAD,OAAW,KAAIoB,UAXJ,yDAAH,qDAoBxB,OAJAZ,OAAOC,SAASmB,GAAG,kBAAmBzB,GAEtCK,OAAOC,SAASmB,GAAG,gBAvBS,WAE3BpB,OAAOqB,SAASC,YAwBhB,sBAAKC,UAAU,YAAf,UACC,8BACGpC,EACkCA,EAAeqC,MAAM,EAAG,GAAK,MAAQrC,EAAeqC,OAAO,GAD5E,wBAAQC,QAjED,WACxBzB,OAAOC,UAAYD,OAAOC,SAASyB,YACtCP,QAAQQ,IAAI,kBAEZ3B,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBACjCE,MAAK,SAAAuB,GACLjC,EAAsBiC,EAAO,IAC7BlC,EAAkB,oBAClBG,EAAkB+B,EAAO,OAEzBlB,OAAM,SAAAC,GACNzB,EAAgByB,EAAMC,cAKvBO,QAAQQ,IAAI,4BACZzC,EAAgB,2DAgDI,SACnB,4BAAIO,QAGL,qBAAK8B,UAAU,iBAAf,SACC,2CAAclC,OAEdJ,EAED,wBAAQwC,QAASZ,EAAoBU,UAAU,MAA/C,0BACA,qBAAKA,UAAU,cAAf,SACC,6CAAgBhC,a,0KCzFL,I,oBCiBAsC,MAXf,WAGE,OACE,qBAAKN,UAAU,MAAf,SACA,cAACxC,EAAA,EAAD,OCCW+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.934d9246.chunk.js","sourcesContent":["\nimport React, {useState} from 'react'\nimport {ethers} from 'ethers'\nimport '../App.css';\n\n\nconst WalletCard = () => {\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [userBalance, setUserBalance] = useState(null);\n\tconst [signResult, setSignResult] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\t\t\tconsole.log('MetaMask Here!');\n\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t\tgetAccountBalance(result[0]);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\n\t\t\t});\n\n\t\t} else {\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\n\t// update account, will cause component re-render\n\tconst accountChangedHandler = (newAccount) => {\n\t\tsetDefaultAccount(newAccount);\n\t\tgetAccountBalance(newAccount.toString());\n\t}\n\n\tconst getAccountBalance = (account) => {\n\t\twindow.ethereum.request({method: 'eth_getBalance', params: [account, 'latest']})\n\t\t.then(balance => {\n\t\t\tsetUserBalance(ethers.utils.formatEther(balance));\n\t\t})\n\t\t.catch(error => {\n\t\t\tsetErrorMessage(error.message);\n\t\t});\n\t};\n\n\tconst chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n\n\tconst signMessageHandler = async () => {\n\t\tconst exampleMessage = 'Example `personal_sign` message.';\n\t\ttry {\n\t\t  const msg = `0x${Buffer.from(exampleMessage, 'utf8').toString('hex')}`;\n\t\t  const sign = await window.ethereum.request({\n\t\t\tmethod: 'personal_sign',\n\t\t\tparams: [msg, defaultAccount],\n\t\t  });\n\t\t  setSignResult(sign);\n\t\t} catch (err) {\n\t\t  console.error(err);\n\t\t  setSignResult(`Error: ${err.message}`);\n\t\t}\n\t}\n\n\t// listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\n\t\n\treturn (\n\t\t<div className='container'>\n\t\t\t<div >\n\t\t\t\t{!defaultAccount ? <button onClick={connectWalletHandler}>\n\t\t\t\t<p>{connButtonText}</p></button> :  defaultAccount.slice(0, 6) + '...' + defaultAccount.slice(-4)}\n\n\t\t\t</div>\n\t\t\t<div className='balanceDisplay'>\n\t\t\t\t<h3>Balance: {userBalance}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\n\t\t\t<button onClick={signMessageHandler} className='btn'>Sign Message</button>\n\t\t\t<div className='signDisplay'>\n\t\t\t\t<h3>Signature: {signResult}</h3>\n\t\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default WalletCard;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport WalletCard from './components/WalletCard';\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n    <WalletCard/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}